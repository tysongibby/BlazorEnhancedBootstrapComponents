@using Microsoft.AspNetCore.Components.Forms
@using System.Linq.Expressions

@inherits InputBase<string>

@if(FloatingLabel == false)
{
    <div class="form-control-wrapper">
        @if (!string.IsNullOrWhiteSpace(Label))
        {
            <label class="form-control-label" for="@Id">@Label</label>        
        }
        <input class="form-control @CssClass" id="@Id" @bind="@CurrentValue" />
        <div class="form-control-validation">
            <ValidationMessage For="@ValidationFor" />
        </div>
    </div>
}
else
{
    <div class="form-floating">
        <input class="form-control @CssClass" id="@Id" @bind="@CurrentValue" placeholder="@Label" />
        <label class="form-control-label" for="@Id">@Label</label>    
        <div class="form-control-validation">
            <ValidationMessage For="@ValidationFor" />
        </div>
    </div>
}

@code{
    [Parameter, EditorRequired]
    public Expression<Func<string>> ValidationFor { get; set; } = default!;

    [Parameter]
    public string? Id { get; set; }

    [Parameter]
    public string? Label { get; set; }

    [Parameter]
    public bool FloatingLabel { get; set; } = false;

    protected override bool TryParseValueFromString(string? value, out string result, out string validationErrorMessage)
    {
        if (!string.IsNullOrWhiteSpace(value))
        {
            // when needed replace this code block with logic to process value
            result = value;
        }
        else result = string.Empty;

        // when needed replace the next to lines to create validation error handling
        validationErrorMessage = string.Empty;
        return true;
    }
}
